Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "PROD"


  TaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "ecs-task-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        


  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "node-task-definition-dev"
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: "node-br"
          Image: "991492039835.dkr.ecr.us-east-1.amazonaws.com/node:latest"

          Essential: true
          PortMappings:
            - ContainerPort: 80
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      
      RequiresCompatibilities:
        - FARGATE


  MyService:
   Type: AWS::ECS::Service
   Properties:
    Cluster: !Ref EcsCluster
    TaskDefinition: !Ref TaskDefinition
    DesiredCount: 1
    LaunchType: "FARGATE"
    NetworkConfiguration:
      AwsvpcConfiguration:
        AssignPublicIp: ENABLED
        Subnets:
          - "subnet-075c36228ac9a4c43"
        SecurityGroups:
          - "sg-06cfbbd9e3ce82854"
        
        
    PlatformVersion: LATEST


  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: node-project-prod-env

  






  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess"
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds'
        - 'arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess'
      Policies:
        - PolicyName: my-codebuild-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: "*"

  

  


  MyCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: node-prod
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: GITHUB
        Location: https://github.com/nandankalia/nodejscloudformation.git
      Artifacts:
        Type: S3
        Location: !Ref MyS3Bucket
        
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER










  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
      Policies:
        - PolicyName: CodePipelineServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - sns:*
                  - cloudwatch:PutMetricData
                  - iam:PassRole
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:BatchGetProjects
                  - codedeploy:*
                  - codepipeline:*
                  - cloudformation:*
                  - cloudtrail:LookupEvents
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'



  
  MyCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: node-pipeline-prod
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref MyS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              Configuration:
                Owner: nandankalia
                Repo: nodejscloudformation
                Branch: main
                OAuthToken: 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
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: node-dev
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
              
              
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: ECS
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref EcsCluster
                ServiceName: !Ref MyService
                FileName: imagedefinitions.json 